1.ArrayList Operation

class Geeks
{
    // Function to insert element
    public static void insert(ArrayList<Character> clist, char c)
    {
       
        //add c to clist
        clist.add(c);
    }
    
    // Function to count frequency of element
    public static void freq(ArrayList<Character> clist, char c)
    {
     
        if(clist.contains(c))
        System.out.println(Collections.frequency(clist,c));
        else
        System.out.println("Not Present");
        
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Search in a row-column sorted Matrix
class Solution 
{ 
    //Function to search a given number in row-column sorted matrix.
	static boolean search(int matrix[][], int n, int m, int x) 
	{  
	    int l = 0;
	    int h = n-1;
	    
	    while(l<n && h>0){
	        if(matrix[l][h]==x){
	            return true;
	        }else if(matrix[l][h]<x){
	            l++;
	        }else{
	            h--;
	        }
	    }
	    return false;
	} 
} 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Range Sum Query 2D - Immutable

class NumMatrix {
 int[][] prefixSum;
    public NumMatrix(int[][] matrix) {
     if(matrix == null || matrix.length == 0)
            return;
        int rows = matrix.length;
        int cols = matrix[0].length;
        prefixSum = new int[rows][cols];
        for(int i = 0; i < rows; i++) {
            for(int j = 0; j < cols; j++) {
                if(j == 0)
                    prefixSum[i][j] = matrix[i][j];
                else
                    prefixSum[i][j] = prefixSum[i][j - 1] + matrix[i][j];
            }
        }
        for(int i = 0; i < cols; i++) {
            for(int j = 0; j < rows; j++) {
                if(j == 0)
                    prefixSum[j][i] = prefixSum[j][i];
                else
                    prefixSum[j][i] = prefixSum[j - 1][i] + prefixSum[j][i];
            }
        }
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int ans = prefixSum[row2][col2] ;

        if(row1>0){
            ans -= prefixSum[row1-1][col2];
        }
        if(col1>0){
            ans -= prefixSum[row2][col1-1];
        }

        if(row1>0 && col1>0){
            ans += prefixSum[row1-1][col1-1];
        }
        return ans;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.
